//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuanLyFile_BTCuoiKi.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QuanLyFille_CuoiKiEntities2 : DbContext
    {
        public QuanLyFille_CuoiKiEntities2()
            : base("name=QuanLyFille_CuoiKiEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Library> Libraries { get; set; }
        public virtual DbSet<Note> Notes { get; set; }
        public virtual DbSet<History> Histories { get; set; }
    
        public virtual int AddLibrary(string fileName, string filePath)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLibrary", fileNameParameter, filePathParameter);
        }
    
        public virtual ObjectResult<GetAllFile_Result> GetAllFile()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllFile_Result>("GetAllFile");
        }
    
        public virtual ObjectResult<string> GetAllExtensionFile()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAllExtensionFile");
        }
    
        public virtual int AddNote(string fileName, string note)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNote", fileNameParameter, noteParameter);
        }
    
        public virtual int AddToLibrary(string fileName, string filePath, string type)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddToLibrary", fileNameParameter, filePathParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetAllFiles_Result> GetAllFiles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllFiles_Result>("GetAllFiles");
        }
    
        public virtual ObjectResult<GetFilePdf_Result> GetFilePdf()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFilePdf_Result>("GetFilePdf");
        }
    
        public virtual ObjectResult<GetFileTxt_Result> GetFileTxt()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFileTxt_Result>("GetFileTxt");
        }
    
        public virtual ObjectResult<GetFileWord_Result> GetFileWord()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFileWord_Result>("GetFileWord");
        }
    
        public virtual ObjectResult<GetAllFile1_Result> GetAllFile1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllFile1_Result>("GetAllFile1");
        }
    
        public virtual int AddNotes(string fileName, string note)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNotes", fileNameParameter, noteParameter);
        }
    
        public virtual ObjectResult<GetNote_Result> GetNote()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNote_Result>("GetNote");
        }
    
        public virtual ObjectResult<string> ShowNote(string fileName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ShowNote", fileNameParameter);
        }
    
        public virtual int UpdateNote(string fileName, string orinFileName, string note)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var orinFileNameParameter = orinFileName != null ?
                new ObjectParameter("OrinFileName", orinFileName) :
                new ObjectParameter("OrinFileName", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNote", fileNameParameter, orinFileNameParameter, noteParameter);
        }
    
        public virtual ObjectResult<string> ShowNote1(string fileName, string orinFileName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var orinFileNameParameter = orinFileName != null ?
                new ObjectParameter("orinFileName", orinFileName) :
                new ObjectParameter("orinFileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ShowNote1", fileNameParameter, orinFileNameParameter);
        }
    
        public virtual ObjectResult<GetTime_Result> GetTime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTime_Result>("GetTime");
        }
    
        public virtual int SaveTime(string filePath, Nullable<System.DateTime> timeOpen)
        {
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var timeOpenParameter = timeOpen.HasValue ?
                new ObjectParameter("TimeOpen", timeOpen) :
                new ObjectParameter("TimeOpen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveTime", filePathParameter, timeOpenParameter);
        }
    
        public virtual int UpdateHistory(string filePath, string orinFilePath, Nullable<System.DateTime> timeOpen)
        {
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var orinFilePathParameter = orinFilePath != null ?
                new ObjectParameter("OrinFilePath", orinFilePath) :
                new ObjectParameter("OrinFilePath", typeof(string));
    
            var timeOpenParameter = timeOpen.HasValue ?
                new ObjectParameter("TimeOpen", timeOpen) :
                new ObjectParameter("TimeOpen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateHistory", filePathParameter, orinFilePathParameter, timeOpenParameter);
        }
    }
}
